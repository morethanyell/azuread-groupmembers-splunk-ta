{"basic_builder": {"appname": "TA-azure-group-member-insight", "friendly_name": "Azure Group Member Insight", "version": "1.0.0", "author": "morethanyell", "description": "Efficiently collects Azure AD group members using specified group display name search keyword", "theme": "#2b7cd2", "large_icon": "", "small_icon": "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", "visible": true, "tab_version": "4.2.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "azure:aad:user:asmemberof", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "get_group_members", "title": "Get Group Members", "description": "Retrieve the Group's members", "type": "customized", "parameters": [{"name": "group_display_name_keyword", "label": "Group Display Name Keyword", "help_string": "Enter a non-RegEx pattern for a Group's Display Name. E.g.: \"MFA-Bypassers\". This will retrieve groups that contain \"MFA=-Bypassers\" in the displayName property", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "MFA-Exception"}, {"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": false, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "e2ba81b8-03fe-407c-96a1-f4bc0f512e7d"}], "data_inputs_options": [{"type": "customized_var", "name": "group_display_name_keyword", "title": "Group Display Name Keyword", "description": "Enter a non-RegEx pattern for a Group's Display Name. E.g.: \"MFA-Bypassers\". This will retrieve groups that contain \"MFA=-Bypassers\" in the displayName property", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport requests\nimport json\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # group_display_name_keyword = definition.parameters.get('group_display_name_keyword', None)\n    # global_account = definition.parameters.get('global_account', None)\n    # tenant_id = definition.parameters.get('tenant_id', None)\n    pass\n\ndef get_bearer_token(helper, client_id, client_secret, tenant_id):\n    \n    token_url = f'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token'\n    \n    data = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'https://graph.microsoft.com/.default'\n    }\n    \n    try:\n        \n        helper.log_info(\"Obtaining access token...\")\n        \n        response = requests.post(token_url, data=data)\n        response.raise_for_status()\n        token_info = response.json()\n        \n        helper.log_info(f\"Access token for client id {client_id} has been granted...\")\n        \n        return token_info['access_token']\n    except requests.RequestException as e:\n        helper.log_error(f\"Error obtaining token: {e}\")\n        return None\n\ndef get_search_matched_groups(helper, access_token, keyword):\n    \n    graph_url = 'https://graph.microsoft.com/v1.0/'\n    groups = graph_url + f'groups/?$search=\"displayName:{keyword}\"'\n    \n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json',\n        'ConsistencyLevel': 'eventual'\n    }\n\n    all_groups = []\n    \n    helper.log_info(f'Retrieving all groups matching \"{keyword}\". Full API uri and params: GET {groups}')\n\n    response = requests.get(groups, headers=headers)\n    \n    page_counter = 1\n\n    if response.status_code == 200:\n        group_members_details = response.json()\n        all_groups.extend(group_members_details['value'])\n\n        while '@odata.nextLink' in group_members_details:\n            \n            page_counter = page_counter + 1\n            \n            if page_counter == 2:\n                helper.log_info(f\"Groups that match {keyword} have multiple pages.\")\n            \n            next_link = group_members_details['@odata.nextLink']\n            response = requests.get(next_link, headers=headers)\n            \n            if response.status_code == 200:\n                group_members_details = response.json()\n                all_groups.extend(group_members_details['value'])\n            else:\n                helper.log_error(f'Error occurred. Status={str(response.status_code)}', response.text)\n                continue\n        \n        if page_counter > 1:\n            helper.log_info(f\"Finished collecting Groups that match {keyword} at page {str(page_counter)}.\")\n        \n        return all_groups\n        \n    else:\n        helper.log_error(f'Error occurred. Status={str(response.status_code)}', response.text)\n        \n\ndef get_group_members(helper, access_token, group_id):\n    \n    graph_url = 'https://graph.microsoft.com/v1.0/'\n    group_members_url = graph_url + f'groups/{group_id}/members?$select=id,userPrincipalName,displayName,jobTitle,accountEnabled'\n\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n\n    all_group_members_details = []\n    \n    helper.log_info(f\"Retrieving members of {group_id}\")\n\n    response = requests.get(group_members_url, headers=headers)\n    \n    page_counter = 1\n\n    if response.status_code == 200:\n        group_members_details = response.json()\n        all_group_members_details.extend(group_members_details['value'])\n\n        while '@odata.nextLink' in group_members_details:\n            \n            page_counter = page_counter + 1\n            \n            if page_counter == 2:\n                helper.log_info(f\"Group {group_id} has multiple pages.\")\n            \n            next_link = group_members_details['@odata.nextLink']\n            response = requests.get(next_link, headers=headers)\n            if response.status_code == 200:\n                group_members_details = response.json()\n                all_group_members_details.extend(group_members_details['value'])\n            else:\n                helper.log_error(f'Error occurred. Status={str(response.status_code)}', response.text)\n                continue\n        \n        if page_counter > 1:\n            helper.log_info(f\"Group {group_id} ended collecting all members at page {str(page_counter)}.\")\n        \n        return all_group_members_details\n\n    else:\n        helper.log_error(f'Error occurred. Status={str(response.status_code)}', response.text)\n\n\ndef collect_events(helper, ew):\n    \n    opt_global_account = helper.get_arg('global_account')\n    client_id = opt_global_account['username']\n    client_secret = opt_global_account['password']\n    tenant_id = helper.get_arg('tenant_id')\n    gdnsk = helper.get_arg('group_display_name_keyword')\n    \n    llvl = helper.get_log_level()\n    \n    helper.set_log_level(llvl)\n    \n    helper.log_info(f\"Loging level is set to: {llvl}\")\n    \n    helper.log_info(f\"Members of group matching '{gdnsk}'. Start of collection.\")\n    \n    token = get_bearer_token(helper, client_id, client_secret, tenant_id)\n    \n    matched_groups = get_search_matched_groups(helper, token, gdnsk)\n    \n    total_groups = len(matched_groups)\n    \n    if total_groups < 1: \n        helper.log_warning(f'No groups matched the keyword \"{gdnsk}\". Disable this collection method or change the keyword. End of collection.')\n        return None\n    \n    helper.log_info(f\"Collected {str(total_groups)} Groups. Retrieval of members from each group begins here...\")\n    \n    meta_source = f\"ms_aad_user:tenant_id:{tenant_id}\"\n    \n    for group in matched_groups:\n        \n        gid = group['id']\n        dn = group['displayName']\n        current_group = get_group_members(helper, token, gid)\n        \n        total_members = len(current_group)\n        \n        if total_members < 1: \n            helper.log_warning(f\"Group {gid} has no members. Skipping this.\")\n            continue\n        \n        for cg in current_group:\n            cg['memberOfGroupId'] = gid\n            cg['memberOfGroupDisplayName'] = dn\n            \n            data_event = json.dumps(cg, separators=(',', ':'))\n            event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data_event)\n            ew.write_event(event)\n    \n    helper.log_info(f\"Ingestion of all users was successful. End of collection.\")\n        \n", "customized_options": [{"name": "group_display_name_keyword", "value": "FD3giv3lmdfnvb3 vo23r nv2ofnv2 ov"}, {"name": "global_account", "value": "account0"}, {"name": "tenant_id", "value": "e2ba81b8-03fe-407c-96a1-f4bc0f512e7d"}], "uuid": "89c70065a8ce4b1f8fcce151dcf4eb54", "sample_count": "75381"}]}, "field_extraction_builder": {"azure:aad:user:asmemberof": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"azure:aad:user:asmemberof": {"metadata": {"event_count": 0, "data_input_name": "get_group_members", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1720031023_18"}}